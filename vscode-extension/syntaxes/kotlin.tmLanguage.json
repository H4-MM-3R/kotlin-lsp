{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Kotlin",
  "scopeName": "source.kotlin",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.kotlin",
          "match": "\\b(if|else|when|for|while|do|break|continue|return|try|catch|finally|throw)\\b"
        },
        {
          "name": "keyword.declaration.kotlin",
          "match": "\\b(class|interface|object|fun|val|var|constructor|init|companion|enum|annotation|data|sealed|abstract|open|final|override|private|protected|public|internal|inline|suspend|infix|operator|vararg|tailrec|lateinit|const|expect|actual)\\b"
        },
        {
          "name": "keyword.other.kotlin",
          "match": "\\b(import|package|as|typealias|typeof|is|in|!is|!in|this|super|where|by|delegate|get|set|field|param|setparam|property|receiver)\\b"
        },
        {
          "name": "constant.language.kotlin",
          "match": "\\b(true|false|null)\\b"
        },
        {
          "name": "storage.type.kotlin",
          "match": "\\b(Any|Unit|Nothing|String|Int|Long|Short|Byte|Double|Float|Char|Boolean|Array|List|MutableList|Set|MutableSet|Map|MutableMap)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.kotlin",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.kotlin",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.kotlin",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.kotlin",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.triple.kotlin",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "name": "constant.character.escape.kotlin",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.kotlin",
          "match": "\\b([0-9]+\\.?[0-9]*([eE][+-]?[0-9]+)?[fFdD]?)\\b"
        },
        {
          "name": "constant.numeric.hex.kotlin",
          "match": "\\b(0[xX][0-9a-fA-F]+)\\b"
        },
        {
          "name": "constant.numeric.binary.kotlin",
          "match": "\\b(0[bB][01]+)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.kotlin",
          "match": "(\\+|\\-|\\*|\\/|%|\\+\\+|\\-\\-|==|!=|===|!==|<|>|<=|>=|&&|\\|\\||!|&|\\||\\^|~|<<|>>|>>>|\\+=|\\-=|\\*=|\\/=|%=|&=|\\|=|\\^=|<<=|>>=|>>>=|\\?:|\\?\\.|!!|\\.\\.|until|downTo|step)"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.kotlin",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.double-slash.kotlin",
          "begin": "//",
          "end": "$"
        }
      ]
    }
  }
} 