import groovy.json.JsonOutput

allprojects {
    afterEvaluate {
        // Example of how to pass input data (null if absent)
        println(System.getProperty("myProp"))
        // A Project is a SourceModule with no source folders, just dependencies to other Projects or SourceSets
        // A SourceSet is a SourceModule, srcDirs are the source folders, and compileClasspath entries are LibraryModules
        println("Project: $path")
        println("- Directory: ${projectDir.absolutePath}")
        println("- Subprojects:")
        if(project.hasProperty("sourceCompatibility")) {
            println("- Java version ${project.sourceCompatibility}")
        }
        def kotlinPlugin = project.plugins.findPlugin("org.jetbrains.kotlin.jvm")
        if (kotlinPlugin != null) {
            def version = kotlinPlugin.class.package.implementationVersion
            println("- Kotlin version ${version}")
        }
        subprojects.forEach {
            println("* ${it.path} -> ${it.projectDir.absolutePath}")
        }
        if(project.hasProperty("sourceSets")) {
            sourceSets.forEach {
                println("- SourceSet: ${it.name}")
                it.allSource.srcDirs.forEach {
                    println("* ${it.path}")
                }
                println("- Classpath:")
                it.compileClasspath.forEach {
                    println("* ${it.path}")
                }
            }
        }
        if(project.hasProperty("android")) {
            println("Android")
            def android = project.android

            android.applicationVariants.all {
                if(it.name != "debug") { return }

                it.sourceSets.forEach {
                    println("- SourceSet: ${it.name}")
                    it.kotlinDirectories.forEach {
                        println("* $it")
                    }
                }
                println("- Classpath:")
                    it.getCompileClasspath().files.each {
                        println("* ${it.path}")
                    }
            }
        }
    }
}
